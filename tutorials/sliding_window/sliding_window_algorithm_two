#include <bits/stdc++.h>
/*
    program is to find a maximum total of segment, consecutive numbers in vector
    but here I have reduse the complixity to be order of O(n+k) instead of O(n*k) as in the first example
    you can find it here https://gitlab.com/Abdelrahman_Rezk/c_plus_tutorials/blob/master/sliding_window/sliding_window_algorithm_one

    you can change the values below as you need
    f ==> represent a function
    v ==> vector
    i ==> integer
    each letter of each first letter of variables declaration represent a specific data type

    you can comment the function f_fill_array and its called in main function then replace your vector to be
    for example vector<int>v_arr {1,2,3,4,5,6,7,8} then change len to be 8 then check your answer ti ensure its correct
*/
using namespace std;
int len = 100,i_total_sum_window=0,i_total_max_window=0,k=3;
vector<int>v_arr;
/* func 1 to fill the vector */
void f_fill_array(int len)
{

    for(int i=0; i < len; ++i)
    {
        v_arr.push_back(rand() % 1000); // get random value from 0 to 999
    }

}

int f_get_maximum_window(vector<int>v_arr, int len, int k)
{
    /*
        firt I will get the first window
    */
    for(int i=0;i<k;++i) i_total_sum_window += v_arr[i];

    i_total_max_window = i_total_sum_window;

    /*
        you can understand len-k+1 from  link below I have explain it more clearly
        https://gitlab.com/Abdelrahman_Rezk/c_plus_tutorials/blob/master/sliding_window/sliding_window_algorithm_one
    */

    for(int i=1;i<len-k+1;++i)
    {
        /*
            you have get above the first window then for each new window
            you need to subtract the window you have from -1 and add the next element see example below for more understand
            2 3 4 5 6 7 8
            if k = 3 then first window will be 1 2 3 total is 6
            and you start loop from 1 so you will get the new window by using last window
             you get and subtract from it v arr[i-1] and add v_ arr[i+k-1]
            because between each two consecutive window there is 2 element common in our case because k is = 3
            first window 1 2 3
            second window 2 3 4
            so if you subtract v arr[i-1] you will get 6 -1
            then add i+k-1 which is in our example i=1 + k = 3 which is 4 - 1 =3
            which is the element you need 4 and your total of next window is 9
            then you continue as well draft it with paper you will get more understand
        */
        i_total_sum_window = i_total_sum_window - v_arr[i-1] + v_arr[i+k-1];

        if(i_total_sum_window > i_total_max_window) i_total_max_window = i_total_sum_window;
    }

    return i_total_max_window;
}


int main()
{

    for(int i=0;i<100;++i)
    {
        f_fill_array(len);
        cout << f_get_maximum_window(v_arr, len, k) << endl;
    }

    return 0;
}
